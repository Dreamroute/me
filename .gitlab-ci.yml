stages:
  - maven-build
  - docker-build
  - dev
  - test
  - prod

variables:
  JVM_PARAM: "-XX:MaxRAM=900m"
  KUBECONFIG: /etc/kubernetes/config
  PROJECT_URL_PREFIX: me  # 访问URL前缀
  PROJECT_GROUP_NAME: common  # 项目名称，对接k8s namespaces
  k8s_replicas: 1  # k8s pod数
  k8s_port: 80  # pod端口，检测转发
  batch_program: me-client,me-server
  batch_port: "7600,7500"

maven package build:
  stage: maven-build
  script:
  - rm -rf /home/gitlab-runner/maven-repo/com/bdfint
  - mvn clean package -DskipTests
  tags:
  - shell-build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
    - ./*/target/*

docker package build:
  stage: docker-build
  script:
  - batch_build
  variables:
    APOLLO: "default"
  tags:
    - shell-build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./*/target/*
    policy: pull

stable dev deploy:
  stage: dev
  environment:
    name: dev
    url: http://${PROJECT_URL_PREFIX}.stable-dev.${AUTO_DEVOPS_DOMAIN}
  variables:
    APOLLO: "stable-dev"
    KUBE_NAMESPACES: "stable-dev-${PROJECT_GROUP_NAME}"  # k8s namespace
    k8s_url: ${PROJECT_URL_PREFIX}.stable-dev.${AUTO_DEVOPS_DOMAIN} # ingress 域名
  script:
    - batch_deploy
  tags:
    - shell-build

stable test deploy:
  stage: test
  environment:
    name: test
    url: http://${PROJECT_URL_PREFIX}.stable-test.${AUTO_DEVOPS_DOMAIN}
  when: manual
  variables:
    APOLLO: "stable-test"
    KUBE_NAMESPACES: "stable-test-${PROJECT_GROUP_NAME}" # k8s namespace
    k8s_url: ${PROJECT_URL_PREFIX}.stable-test.${AUTO_DEVOPS_DOMAIN} # ingress 域名
  script:
    - batch_deploy
  only:
    - master
  tags:
    - shell-build

prod deploy:
  stage: prod
  script:
    - staging_deploy
  environment:
    name: prod
    url: http://${PROJECT_URL_PREFIX}.zlgx.com
  variables:
    APOLLO: "production"
    KUBE_NAMESPACES: "${PROJECT_GROUP_NAME}" # k8s namespace
    k8s_url: ${PROJECT_URL_PREFIX}.zlgx.com # ingress 域名
    KUBECONFIG: .kube/config
    k8s_replicas: 2
  when: manual
  only:
    - master
  tags:
    - shell-build


.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export IMAGE=${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${CI_PROJECT_NAME}
  export TAG=${CI_PIPELINE_ID}_${CI_COMMIT_SHA:0:6}
  function deploy() {
    # k8s yaml文件
    helm template helm/ \
      --name= $CI_PROJECT_NAME \
      --set image.repository=$IMAGE \
      --set image.tag=$TAG \
      --set ingress.hosts[0]=$k8s_url \
      --set service.port=$k8s_port \
      --set nameOverride=${CI_PROJECT_NAME} \
      --set replicaCount=$k8s_replicas \
      --set apollo=$APOLLO \
      > deployment.yaml
    cat deployment.yaml
    kubectl apply -f deployment.yaml -n $KUBE_NAMESPACES
  }
  function build() {
    if [[ -n "$GIT_REGISTRY_USER" ]]; then
      echo "登录Harbor仓库..."
      docker login -u "$GIT_REGISTRY_USER" -p "$GIT_REGISTRY_PASSWD" "$GIT_REGISTRY_URL"
    fi
    
    echo "正在发布到镜像仓库..."
    
    if [[ -f Dockerfile ]]; then
      # CACHE_FROM=$CI_REGISTRY_IMAGE/cache-from
      docker build -t $IMAGE:$TAG .
      docker push $IMAGE:$TAG
      echo "删除本地镜像..."
      docker rmi $IMAGE:$TAG
    fi
  }
  function delete() {
    echo "准备删除旧的部署..."
    kubectl delete --namespace="$KUBE_NAMESPACES"  -f deployment.yaml
    }
    
  function batch_deploy() {
    # k8s yaml文件
    cd  yaml/
    sed -i "s#k8s.tag#$TAG#g" *
    sed -i "s#apollo#$APOLLO#g" *
    sed -i "s#k8s.url#${k8s_url}#g" *
    sed -i "s#k8s.replicas#${k8s_replicas}#g" *
    sed -i "s#k8s.jvm#$JVM_PARAM#g" *
    PJ_NAME=(${batch_program//,/ })
    for ((i=0;i<${#PJ_NAME[@]};i++))
    do
      export k8s_images=${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${PJ_NAME[$i]}
      sed -i "s#k8s.images#${k8s_images}#g" ${PJ_NAME[$i]}.yaml
      cat ${PJ_NAME[$i]}.yaml
    done
    kubectl apply -f ./ -n $KUBE_NAMESPACES
  }
  function batch_build() {
    if [[ -n "$GIT_REGISTRY_USER" ]]; then
      echo "登录Harbor仓库..."
      docker login -u "$GIT_REGISTRY_USER" -p "$GIT_REGISTRY_PASSWD" "$GIT_REGISTRY_URL"
    fi
    
    echo "正在发布到镜像仓库..."
    PJ_NAME=(${batch_program//,/ })
    for ((i=0;i<${#PJ_NAME[@]};i++))
    do
      cd ${PJ_NAME[$i]}
      if [[ -f Dockerfile ]]; then
        # CACHE_FROM=$CI_REGISTRY_IMAGE/cache-from
        docker build -t ${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${PJ_NAME[$i]}:$TAG .
        docker push ${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${PJ_NAME[$i]}:$TAG
        echo "删除本地镜像..."
        docker rmi ${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${PJ_NAME[$i]}:$TAG
      fi
      cd ../
    done
  }
  function staging_deploy() {
    if [[ -n "$GIT_REGISTRY_USER_ALIYUN" ]]; then
      docker login -u "$GIT_REGISTRY_USER_ALIYUN" -p "$GIT_REGISTRY_PASSWD" "$GIT_REGISTRY_ALIYUN"
    fi
    # kubernetes config
    mkdir .kube
    echo $KUBE_ALIYUN_PROD |base64 -d > $KUBECONFIG
    # create imagepull secret
    kubectl describe secret bdfint -n "$KUBE_NAMESPACES" || kubectl get secret bdfint -o yaml -n default | sed "s/default/${KUBE_NAMESPACES}/g" | kubectl -n "$KUBE_NAMESPACES" create -f -
    # k8s yaml文件
    sed -i "s#k8s.tag#$TAG#g" yaml/*
    sed -i "s#apollo#$APOLLO#g" yaml/*
    sed -i "s#k8s.url#${k8s_url}#g" yaml/*
    sed -i "s#k8s.replicas#${k8s_replicas}#g" yaml/*
    sed -i "s#k8s.jvm#$JVM_PARAM#g" yaml/*
    PJ_NAME=(${batch_program//,/ })
    for ((i=0;i<${#PJ_NAME[@]};i++))
    do
      # push images
      export Aliyun=$GIT_REGISTRY_ALIYUN/bdfint/${PJ_NAME[$i]}
      export k8s_images=${GIT_REGISTRY_URL}/${GIT_REGISTRY_PROJECT}/${PJ_NAME[$i]}
      docker pull $k8s_images:$TAG
      docker tag $k8s_images:$TAG $Aliyun:$TAG
      docker push $Aliyun:$TAG
      sed -i "s#k8s.images#${Aliyun}#g" yaml/${PJ_NAME[$i]}.yaml
      cat yaml/${PJ_NAME[$i]}.yaml
      kubectl apply -f ./yaml/${PJ_NAME[$i]}.yaml -n $KUBE_NAMESPACES
      sleep 5
      docker rmi $k8s_images:$TAG $Aliyun:$TAG
    done
    
  }
  function prod_deploy() {
    # kubernetes config
    mkdir .kube
    echo $KUBE_ALIYUN_PROD |base64 -d > $KUBECONFIG
    # create imagepull secret
    kubectl describe secret bdfint -n "$KUBE_NAMESPACES" || kubectl get secret bdfint -o yaml -n default | sed "s/default/${KUBE_NAMESPACES}/g" | kubectl -n "$KUBE_NAMESPACES" create -f -
    # k8s yaml文件
    sed -i "s#k8s.tag#$TAG#g" yaml/*
    sed -i "s#apollo#$APOLLO#g" yaml/*
    sed -i "s#k8s.url#${k8s_url}#g" yaml/*
    sed -i "s#k8s.replicas#${k8s_replicas}#g" yaml/*
    sed -i "s#k8s.jvm#$JVM_PARAM#g" yaml/*
    PJ_NAME=(${batch_program//,/ })
    for ((i=0;i<${#PJ_NAME[@]};i++))
    do
      # push images
      export Aliyun=$GIT_REGISTRY_ALIYUN/bdfint/${PJ_NAME[$i]}
      sed -i "s#k8s.images#${Aliyun}#g" yaml/${PJ_NAME[$i]}.yaml
      cat yaml/${PJ_NAME[$i]}.yaml
      kubectl apply -f ./yaml/${PJ_NAME[$i]}.yaml -n $KUBE_NAMESPACES
      sleep 5
    done
  }


before_script:
  - *auto_devops
